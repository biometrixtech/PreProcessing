# A template that creates a code pipeline to create a new Docker image and register it to ECR
#
# Copyright 2016 Melon Software Ltd (UK), all rights reserved
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a Code Pipeline to create a Job Definition with a new Docker image registered in ECR"

Parameters:

    GithubUser:
        Type: "String"
        Description: "Use an automation user rather than a personal user"
    GithubToken:
        Type: "String"
        Description: "See https://help.github.com/articles/creating-an-access-token-for-command-line-use/"
        NoEcho: true

    DefaultMemory:
        Type: "Number"
        Description: "Default memory allocation, in MB"

    DefaultVcpus:
        Type: "Number"
        Description: "Default number of vCPUs to use for this job"

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "VCS Source" }
            Parameters:
              - "GithubUser"
              - "GithubToken"

        ParameterLabels:
            GithubUser: { default: "Username" }
            GithubToken: { default: "Access Token" }

Mappings:
    ServiceConfiguration:
        sessionprocess2:
            Cpu: 128
            Memory: 128
            Port: 80
            BuildSize: "BUILD_GENERAL1_SMALL"

Resources:

    ##########################################################################################################
    ## ECR
    ##########################################################################################################

    EcrRepository:
        Type: "AWS::ECR::Repository"
        Properties:
            RepositoryName: { "Fn::Sub": "preprocessing/batchjob" }
            # TODO tags are supported, but not implemented in CF yet

    ##########################################################################################################
    ##  IAM
    ##########################################################################################################

    TriggerRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "codebuild:BatchGetBuilds"
                          - "codebuild:StartBuild"
                          - "ecr:ListImages"
                        Effect: "Allow"
                        Resource: "*"
            RoleName: { "Fn::Sub": "preprocessing-infrastructure-batchjob-trigger-${AWS::Region}" }

    ##########################################################################################################
    ##  CODEBUILD
    ##########################################################################################################

    CodeBuildProject:
        Type: "AWS::CodeBuild::Project"
        Properties:
            Name: { "Fn::Sub": 'preprocessing-batchjob' }
            Description: { "Fn::Sub": 'Builds a new Docker image for the Batch services and registers it to ECR' }
            ServiceRole: { "Fn::ImportValue": "ServiceRoleCodeBuild" }
            Artifacts:
                Type: "no_artifacts"
            Environment:
                Type: "linuxContainer"
                ComputeType: "BUILD_GENERAL1_SMALL"
                Image: "aws/codebuild/docker:1.12.1"
                EnvironmentVariables:
                  - { Name: "AWS_DEFAULT_REGION", Value: { Ref: "AWS::Region" } }
                  - { Name: "ECR_REGISTRY", Value: { "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com" } }
                  - { Name: "ECR_REPOSITORY", Value: { Ref: "EcrRepository" } }
                  - { Name: "CACHE_VERSION", Value: "9db4315f8672dd3f7a080770d55e1f3ed68b2234" }  # TODO configurable
            TimeoutInMinutes: 60
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-batchjob" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: "infra" }
            Source:
                Location: { "Fn::Sub": 'https://${GithubUser}:${GithubToken}@github.com/biometrixtech/PreProcessing.git' }
                Type: "GITHUB"
                BuildSpec: |
                    version: 0.2
                    phases:
                        pre_build:
                            commands:
                              - GIT_COMMIT=$(git rev-parse $CODEBUILD_SOURCE_VERSION)
                              - IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$GIT_COMMIT

                                # Log in to the registry
                              - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)

                              - docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_VERSION

                        build:
                            commands:
                                # Build the docker image
                              - docker build -f docker/preprocessing.docker --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_VERSION -t $IMAGE_NAME .

                        post_build:
                            commands:
                                # Push the image to the docker registry
                              - docker push $IMAGE_NAME

    LambdaTrigger:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    from botocore.vendored import requests
                    import boto3, json, os, time, traceback

                    codebuild_client = boto3.client('codebuild')
                    ecr_client = boto3.client('ecr')


                    class NoSuchImageException(Exception):
                        pass


                    class CloudFormationHandler:
                        def __init__(self, event, context):
                            self.event = event
                            self.physical_resource_id = event.get('PhysicalResourceId', context.log_stream_name)

                        def _send_cf_response(self, success, reason):
                            json_response_body = json.dumps({
                                'Status': 'SUCCESS' if success else 'FAILED',
                                'Reason': reason,
                                'PhysicalResourceId': self.physical_resource_id,
                                'StackId': self.event['StackId'],
                                'RequestId': self.event['RequestId'],
                                'LogicalResourceId': self.event['LogicalResourceId'],
                                'Data': {}
                            })
                            requests.put(
                                self.event['ResponseURL'],
                                data=json_response_body,
                                headers={'content-type': '', 'content-length': str(len(json_response_body))}
                            )

                        def process(self, event):
                            if event['RequestType'] == 'Delete':
                                # Probably rolling back, allow that to happen
                                self._send_cf_response(True, "Allowing rollback")
                                return
                            try:
                                self.physical_resource_id = self.create(event['ResourceProperties'].get('EcrImageTag', 'latest'))
                                print("physical_resource_id={}".format(self.physical_resource_id))
                                self._send_cf_response(True, 'Success')

                            except Exception as e:
                                self._send_cf_response(False, str(e) + "\n\n" + traceback.format_exc())

                        def create(self, ecr_image_tag):
                            ecr_registry_name = os.environ['ECR_REGISTRY']
                            ecr_repository_name = os.environ['ECR_REPOSITORY']

                            try:
                                ecr_image_digest = _assert_image_exists(ecr_registry_name, ecr_repository_name, ecr_image_tag)
                                print('Found existing image in ECR with digest {}'.format(ecr_image_digest))
                            except NoSuchImageException:
                                # Need to create it
                                print('Triggering CodeBuild for version "{}"'.format(ecr_image_tag))
                                res = codebuild_client.start_build(projectName='preprocessing-batchjob', sourceVersion=ecr_image_tag)
                                build_id = res['build']['id']
                                print('Build {}'.format(build_id))

                                # Wait for the image to be created
                                for i in range(100):
                                    if not _check_codebuild_completed(build_id):
                                        time.sleep(5)

                                ecr_image_digest = _assert_image_exists(ecr_registry_name, ecr_repository_name, ecr_image_tag)

                            return "{}/{}@{}".format(ecr_registry_name, ecr_repository_name, ecr_image_digest)


                    def _assert_image_exists(registry_name, repository_name, image_tag):
                        images = _get_all_images(registry_name, repository_name)
                        if image_tag in images:
                            return images[image_tag]
                        else:
                            raise NoSuchImageException()


                    def _check_codebuild_completed(build_id):
                        build = codebuild_client.batch_get_builds(ids=[build_id])['builds'][0]
                        if build['buildStatus'] in ['FAILED', 'TIMED_OUT', 'FAULT', 'STOPPED']:
                            raise Exception("CodeBuild build failed!")
                        return not build['buildStatus'] == 'IN_PROGRESS'


                    def _get_all_images(registry_name, repository_name, next_token=None):
                        if next_token is None:
                            res = ecr_client.list_images(repositoryName=repository_name)
                        else:
                            res = ecr_client.list_images(repositoryName=repository_name, nextToken=next_token)
                        images = {i['imageTag'] if 'imageTag' in i else 'none': i['imageDigest'] for i in res['imageIds']}
                        if 'nextToken' in res:
                            images.update(_get_all_images(registry_name, repository_name, res['nextToken']))
                        return images


                    def handler(event, context):
                        print(json.dumps(event))
                        CloudFormationHandler(event, context).process(event)

            Environment:
                Variables:
                    ECR_REGISTRY: { "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com" }
                    ECR_REPOSITORY: { Ref: "EcrRepository" }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "300"
            Role: { "Fn::GetAtt" : [ "TriggerRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-infrastructure-batchjob-trigger" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-infrastructure-batchjob-trigger" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: "infra" }
