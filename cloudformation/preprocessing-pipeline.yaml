# A template that creates the processing pipeline for biometric data
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a pre-processing pipeline"

Parameters:

    Environment:
        Type: "String"
        Description: "The name of the Environment"

    BatchJobVersion:
        Type: "String"
        Description: "The version of the downloadandchunk batch job to run"

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterLabels:
            Environment: { default: "Environment" }
            BatchJobVersion: { default: "Application Code version" }

Resources:

    ##########################################################################################################
    ##  IAM
    ##########################################################################################################

    LambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                          - "cloudwatch:PutMetricData"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "sns:Publish"
                          - "lambda:InvokeFunction"
                          - "s3:ListBucket"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "ssm:DescribeParameters"
                          - "ssm:GetParameters"
                          - "kms:Decrypt"
                        Effect: "Allow"
                        Resource:
                          - "*" # TODO this should be segregated by environment somehow

                      - Action:
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/preprocessing-${Environment}-ingest-*" }
            RoleName: { "Fn::Sub": "preprocessing-${Environment}-lambda-${AWS::Region}" }

    BatchExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "ecs-tasks.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "sqs:DeleteMessage"
                        Effect: "Allow"
                        Resource: { "Fn::GetAtt": [ "LinearityEnforcingQueue", "Arn" ] }

                      - Action:
                          - "s3:GetObject"
                          - "s3:PutObject"
                          - "s3:ListBucket"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "states:SendTaskFailure"
                          - "states:SendTaskHeartbeat"
                          - "states:SendTaskSuccess"
                        Effect: "Allow"
                        Resource: { Ref: "StepFunctionsActivity" }

                      - Action:
                          - "ssm:DescribeParameters"
                          - "ssm:GetParameters"
                          - "kms:Decrypt"
                        Effect: "Allow"
                        Resource: "*" # TODO this should be segregated by environment somehow

                      - Action:
                          - "cloudwatch:PutMetricData"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "sns:Publish"
                        Effect: "Allow"
                        Resource:
                          - { "Fn::Sub": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alerts-${Environment}-trigger" }
                          - { Ref: "SnsDataQualityTopic" }

                      - Action:
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/preprocessing-${Environment}-ingest-*" }

            RoleName: { "Fn::Sub": "preprocessing-${Environment}-execute-${AWS::Region}" }

    ##########################################################################################################
    ##  BATCH
    ##########################################################################################################

    BatchJobImage:
        Type: "Custom::CodeBuildEcrImage"
        Properties:
            ServiceToken: { "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:preprocessing-infrastructure-batchjob-trigger" }
            EcrImageTag: { Ref: "BatchJobVersion" }

    BatchJobDefinition:
        Type: "AWS::Batch::JobDefinition"
        Properties:
            Type: "container"
            Parameters: { "Meta": "{}", "Input": "{}" }
            ContainerProperties:
                Command: [ "Ref::Job", "Ref::Input", "Ref::Meta" ]
                Memory: 512
                Privileged: true
                JobRoleArn: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/preprocessing-${Environment}-execute-${AWS::Region}" }
                ReadonlyRootFilesystem: false
                Vcpus: 2
                Image: { Ref: "BatchJobImage" }
            JobDefinitionName: { "Fn::Sub": "preprocessing-${Environment}-batchjob" }
            RetryStrategy:
                Attempts: 1

    ##########################################################################################################
    ##  LAMBDA
    ##########################################################################################################

    LambdaUnpackParallelResults:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    def handler(input, _):
                        for branch in input['_Unpack']:
                            for k, v in branch.items():
                                input[k] = v
                        del input['_Unpack']
                        return input
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-unpackparallelresults" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-unpackparallelresults" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaUpdateStatus:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    import boto3, os, datetime
                    from boto3.dynamodb.conditions import Attr
                    ddb_session_events_table = boto3.resource('dynamodb').Table(os.environ['DYNAMODB_SESSION_EVENTS_TABLE_NAME'])

                    def handler(data, _):
                        session_event_updates = DynamodbUpdate()
                        session_event_updates.set("updatedDate", datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ"))
                        session_event_updates.set("sessionStatus", data['SessionStatus'])

                        ddb_session_events_table.update_item(
                            Key={'id': data['SessionId']},
                            ConditionExpression=Attr('id').exists(),
                            UpdateExpression=session_event_updates.update_expression,
                            ExpressionAttributeValues=session_event_updates.parameters,
                        )

                    class DynamodbUpdate:
                        def __init__(self):
                            self._add = []
                            self._set = []
                            self._parameters = {}

                        def set(self, field, value):
                            self._set.append("{field} = :{field}".format(field=field))
                            self._parameters[':' + field] = value

                        def add(self, field, value):
                            self._add.append("{field} :{field}".format(field=field))
                            self._parameters[':' + field] = value

                        @property
                        def update_expression(self):
                            return 'SET {} '.format(', '.join(self._set)) + (
                                'ADD {}'.format(', '.join(self._add)) if len(self._add) else '')

                        @property
                        def parameters(self):
                            return self._parameters
            Environment:
                Variables:
                    DYNAMODB_SESSION_EVENTS_TABLE_NAME: { "Fn::Sub": "preprocessing-${Environment}-ingest-sessions" }
                    ENVIRONMENT: { Ref: "Environment" }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-updatestatus" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-updatestatus" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareDownloadAndChunk:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "downloadandchunk",
                                        "Memory": 2048,
                                        "Vcpus": 2,
                                    },
                                    "InputPath": "$"
                                }
                            ],
                            "Input": event['SourceEvent']
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-downloadandchunk" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-downloadandchunk" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaReadData:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    import boto3, json, os
                    from boto3.dynamodb.conditions import Key
                    dynamodb_resource = boto3.resource('dynamodb').Table('preprocessing-{}-ingest-sessions'.format(os.environ['ENVIRONMENT']))

                    def handler(event, context):
                        session_id = event['SourceEvent']['SessionId']
                        ret = dynamodb_resource.query(Select='ALL_ATTRIBUTES', KeyConditionExpression=Key('id').eq(session_id))
                        session = ret['Items'][0]
                        print(session)
                        return {
                            "SessionId": session_id,
                            "Version": session['version'],
                            "EventDate": session.get('eventDate', '').split('T')[0],
                            "TeamId": session.get('teamId', None),
                            "TrainingGroupIds": session.get('trainingGroupIds', None),
                            "UserId": session.get('userId', None),
                            "UserMass": session.get('userMass', None) or 72.5, # kilograms
                        }

            Environment:
                Variables:
                    ENVIRONMENT: { Ref: "Environment" }
                    QUERYPOSTGRES_LAMBDA_ARN: { "Fn::ImportValue": { "Fn::Sub": "QuerypostgresLambdaArn-${Environment}" } }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-readdata" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-readdata" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareTransformAndPlacement:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}",
                                "NoopJobDefinition": "${BatchJobDefinition}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "transformandplacement",
                                        "Memory": 1024,
                                        "Vcpus": 2,
                                    },
                                    "InputPath": "$"
                                }
                            ],
                            "Input": {
                                **event["ReadDatabase"],
                                **{"Filename": event['DownloadAndChunk']['Output']['Filenames'][0]}
                            }
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-transformandplacement" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-transformandplacement" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareSessionProcess2:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}",
                                "NoopJobDefinition": "${BatchJobDefinition}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "sessionprocess2",
                                        "Memory": 1024,
                                        "Vcpus": 2,
                                    },
                                    "InputPath": "$[{}]".format(i)
                                }
                                for i in range(len(event['DownloadAndChunk']['Output']['Filenames']))
                            ],
                            "Input": [
                                {
                                    **event["ReadDatabase"],
                                    **{
                                        "Filename": f,
                                        "BodyFrameTransforms": event['TransformAndPlacement']['Output']['BodyFrameTransforms'],
                                        "HipNeutralYaw": event['TransformAndPlacement']['Output']['HipNeutralYaw'],
                                        "Placement": event['TransformAndPlacement']['Output']['Placement'],
                                    }
                                }
                                for f in event['DownloadAndChunk']['Output']['Filenames']
                            ]
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-sessionprocess2" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-sessionprocess2" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareScoring:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}",
                                "NoopJobDefinition": "${BatchJobDefinition}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "scoring",
                                        "Memory": 4096,
                                        "Vcpus": 4,
                                    },
                                    "InputPath": "$"
                                }
                            ],
                            "Input": {
                                **event["ReadDatabase"],
                                **{"Filenames": event['DownloadAndChunk']['Output']['Filenames']}
                            }
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-scoring" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-scoring" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaWritePostgres:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    import boto3, json, os
                    def handler(event, context):
                        lambda_client = boto3.client('lambda', region_name='us-west-2')
                        res = json.loads(lambda_client.invoke(
                            FunctionName=os.environ['QUERYPOSTGRES_LAMBDA_ARN'],
                            Payload=json.dumps({
                                "Queries": [{
                                    "Query": "UPDATE session_events SET session_success=True, updated_at = now() WHERE id = %s",
                                    "Parameters": [event['ReadDatabase']['SessionId']]
                                }],
                                "Config": {"ENVIRONMENT": os.environ['ENVIRONMENT']}
                            }),
                        )['Payload'].read())
                        if res['Errors'][0] is not None:
                            raise Exception(res['Errors'][0])
                        return {}

            Environment:
                Variables:
                    ENVIRONMENT: { Ref: "Environment" }
                    QUERYPOSTGRES_LAMBDA_ARN: { "Fn::ImportValue": { "Fn::Sub": "QuerypostgresLambdaArn-${Environment}" } }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-writepostgres" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-writepostgres" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareAggregateSession:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}",
                                "NoopJobDefinition": "${BatchJobDefinition}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "aggregatesession",
                                        "Memory": 4096,
                                        "Vcpus": 4,
                                    },
                                    "InputPath": "$"
                                }
                            ],
                            "Input": event["ReadDatabase"]
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregatesession" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregatesession" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareAggregateTwomin:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}",
                                "NoopJobDefinition": "${BatchJobDefinition}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "aggregatetwomin",
                                        "Memory": 2048,
                                        "Vcpus": 2,
                                    },
                                    "InputPath": "$[{}]".format(i)
                                }
                                for i in range(len(event['Scoring']['Output']['Filenames']))
                            ],
                            "Input": [
                                {**event["ReadDatabase"], **{"Filename": f}}
                                for f in event['Scoring']['Output']['Filenames']
                            ]
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregatetwomin" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregatetwomin" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareAggregateDateUser:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}",
                                "NoopJobDefinition": "${BatchJobDefinition}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "aggregatedateuser",
                                        "Memory": 4096,
                                        "Vcpus": 4,
                                    },
                                    "InputPath": "$"
                                }
                            ],
                            "Input": event["ReadDatabase"]
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregatedateuser" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregatedateuser" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareAggregateTeam:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}",
                                "NoopJobDefinition": "${BatchJobDefinition}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "aggregateteam",
                                        "Memory": 512,
                                        "Vcpus": 1,
                                    },
                                    "InputPath": "$"
                                }
                            ],
                            "Input": event["ReadDatabase"],
                            "LinearityGroup": event["ReadDatabase"]["TeamId"]
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregateteam" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregateteam" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareAggregateTrainingGroup:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        training_group_ids = event["ReadDatabase"]["TrainingGroupIds"] or {}
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}",
                                "NoopJobDefinition": "${BatchJobDefinition}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "aggregatetraininggroup",
                                        "Memory": 512,
                                        "Vcpus": 1,
                                    },
                                    "InputPath": "$"
                                }
                            ],
                            "Input": event["ReadDatabase"],
                            "LinearityGroup": training_group_ids[0] if len(training_group_ids) else ''
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregatetraininggroup" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregatetraininggroup" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareAggregateProgComp:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}",
                                "NoopJobDefinition": "${BatchJobDefinition}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "aggregateprogcomp",
                                        "Memory": 4096,
                                        "Vcpus": 4,
                                    },
                                    "InputPath": "$"
                                }
                            ],
                            "Input": event["ReadDatabase"]
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregateprogcomp" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregateprogcomp" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareAggregateProgCompDate:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}",
                                "NoopJobDefinition": "${BatchJobDefinition}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "aggregateprogcompdate",
                                        "Memory": 4096,
                                        "Vcpus": 4,
                                    },
                                    "InputPath": "$"
                                }
                            ],
                            "Input": event["ReadDatabase"]
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregateprogcompdate" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-aggregateprogcompdate" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaNotifyFailure:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        import boto3, os
                        sns_client = boto3.client('sns')
                        response = sns_client.publish(
                            TopicArn=os.environ['SNS_TOPIC'],
                            Message=event['ReadDatabase']['SessionId'],
                        )
            Environment:
                Variables:
                    SNS_TOPIC: { Ref: "SnsFailureTopic" }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-notifyfailure" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-notifyfailure" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaPrepareCleanup:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: !Sub |
                    def handler(event, context):
                        return {
                            "Meta": {
                                "ActivityArn": "${StepFunctionsActivity}",
                                "ExecutionArn": event['Meta']['ExecutionArn'],
                                "ExecutionName": event['Meta']['ExecutionName'],
                                "Environment": "${Environment}",
                                "NoopJobDefinition": "${BatchJobDefinition}"
                            },
                            "Branches": [
                                {
                                    "Resource": {
                                        "BatchJobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                        "BatchJobDefinition": "${BatchJobDefinition}",
                                        "BatchJob": "cleanup",
                                        "Memory": 256,
                                        "Vcpus": 2,
                                    },
                                    "InputPath": "$"
                                }
                            ],
                            "Input": event["ReadDatabase"]
                        }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-prepare-cleanup" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-cleanup" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    ##########################################################################################################
    ##  SQS
    ##########################################################################################################

    LinearityEnforcingQueue:
        Type: "AWS::SQS::Queue"
        Properties:
            ContentBasedDeduplication: false
            FifoQueue: true
            MessageRetentionPeriod: 86400
            QueueName: { "Fn::Sub": "preprocessing-${Environment}-linearity.fifo" }
            ReceiveMessageWaitTimeSeconds: 20
            VisibilityTimeout: 3600

    ##########################################################################################################
    ##  SNS
    ##########################################################################################################

    SnsFailureTopic:
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: "Biometrix preprocessing failure notification"
            TopicName: { "Fn::Sub": "preprocessing-${Environment}-failure" }

    SnsDataQualityTopic:
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: "PreProcessing data quality issue notifications"
            TopicName: { "Fn::Sub": "preprocessing-${Environment}-dataquality" }

    SnsDataQualitySubscriptionDipesh:
        Type: "AWS::SNS::Subscription"
        Properties:
            Endpoint: { "Fn::Sub": "dipesh+dataquality-${Environment}@fathomai.com" }
            Protocol: "email"
            TopicArn: { Ref: "SnsDataQualityTopic" }

    SnsDataQualitySubscriptionGabby:
        Type: "AWS::SNS::Subscription"
        Properties:
            Endpoint: { "Fn::Sub": "gabby+dataquality-${Environment}@fathomai.com" }
            Protocol: "email"
            TopicArn: { Ref: "SnsDataQualityTopic" }

    ##########################################################################################################
    ##  STEP FUNCTIONS
    ##########################################################################################################

    StepFunctionsActivity:
        Type: "AWS::StepFunctions::Activity"
        Properties:
            Name: { "Fn::Sub": "preprocessing-${Environment}" }

    StateMachine:
        Type: "AWS::StepFunctions::StateMachine"
        Properties:
            DefinitionString: !Sub |
                {
                    "StartAt": "Start",
                    "States": {
                        "Start": {
                            "Type": "Parallel",
                            "Branches": [
                                {
                                    "StartAt": "PassStatus0",
                                    "States": {
                                        "PassStatus0": {
                                            "Type": "Pass",
                                            "Result": "PROCESSING_IN_PROGRESS",
                                            "ResultPath": "$.SourceEvent.SessionStatus",
                                            "Next": "UpdateStatus0"
                                        },
                                        "UpdateStatus0": {
                                            "Type": "Task",
                                            "Resource": "${LambdaUpdateStatus.Arn}",
                                            "InputPath": "$.SourceEvent",
                                            "OutputPath": null,
                                            "ResultPath": null,
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "BuildDownloadAndChunkContext",
                                    "States": {
                                        "BuildDownloadAndChunkContext": {
                                            "Type": "Task",
                                            "Resource": "${LambdaPrepareDownloadAndChunk.Arn}",
                                            "ResultPath": "$.DownloadAndChunk",
                                            "Next": "DownloadAndChunk"
                                        },
                                        "DownloadAndChunk": {
                                            "Type": "Task",
                                            "InputPath": "$.DownloadAndChunk",
                                            "Resource": "${StepFunctionsActivity}",
                                            "TimeoutSeconds": 600,
                                            "HeartbeatSeconds": 600,
                                            "ResultPath": "$.Output.DownloadAndChunk",
                                            "OutputPath": "$.Output",
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "ReadData",
                                    "States": {
                                        "ReadData": {
                                            "Type": "Task",
                                            "Resource": "${LambdaReadData.Arn}",
                                            "ResultPath": "$.Output.ReadDatabase",
                                            "OutputPath": "$.Output",
                                            "End": true
                                        }
                                    }
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$._Unpack",
                            "Next": "UnpackParallelResults1"
                        },
                        "UnpackParallelResults1": {
                            "Type": "Task",
                            "Resource": "${LambdaUnpackParallelResults.Arn}",
                            "Next": "BuildTransformAndPlacementContext"
                        },
                        "BuildTransformAndPlacementContext": {
                            "Type": "Task",
                            "Resource": "${LambdaPrepareTransformAndPlacement.Arn}",
                            "ResultPath": "$.TransformAndPlacement",
                            "Next": "TransformAndPlacement"
                        },
                        "TransformAndPlacement": {
                            "Type": "Task",
                            "InputPath": "$.TransformAndPlacement",
                            "Resource": "${StepFunctionsActivity}",
                            "TimeoutSeconds": 600,
                            "HeartbeatSeconds": 600,
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$.TransformAndPlacement",
                            "Next": "BuildSessionProcess2Context"
                        },
                        "BuildSessionProcess2Context": {
                            "Type": "Task",
                            "Resource": "${LambdaPrepareSessionProcess2.Arn}",
                            "ResultPath": "$.SessionProcess2",
                            "Next": "SessionProcess2"
                        },
                        "SessionProcess2": {
                            "Type": "Task",
                            "InputPath": "$.SessionProcess2",
                            "Resource": "${StepFunctionsActivity}",
                            "TimeoutSeconds": 600,
                            "HeartbeatSeconds": 600,
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$.SessionProcess2",
                            "Next": "BuildScoringContext"
                        },
                        "BuildScoringContext": {
                            "Type": "Task",
                            "Resource": "${LambdaPrepareScoring.Arn}",
                            "ResultPath": "$.Scoring",
                            "Next": "Scoring"
                        },
                        "Scoring": {
                            "Type": "Task",
                            "InputPath": "$.Scoring",
                            "Resource": "${StepFunctionsActivity}",
                            "TimeoutSeconds": 600,
                            "HeartbeatSeconds": 600,
                            "Catch": [
                                {
                                    "ErrorEquals": [ "NoHistoricalDataException" ],
                                    "Next": "ExceptionSkipProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                },
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$.Scoring",
                            "Next": "Aggregate1"
                        },
                        "Aggregate1": {
                            "Type": "Parallel",
                            "Branches": [
                                {
                                    "StartAt": "WritePostgres",
                                    "States": {
                                        "WritePostgres": {
                                            "Type": "Task",
                                            "Resource": "${LambdaWritePostgres.Arn}",
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "BuildAggregateProgComp",
                                    "States": {
                                        "BuildAggregateProgComp": {
                                            "Type": "Task",
                                            "Resource": "${LambdaPrepareAggregateProgComp.Arn}",
                                            "ResultPath": "$.AggregateProgComp",
                                            "Next": "AggregateProgComp"
                                        },
                                        "AggregateProgComp": {
                                            "Type": "Task",
                                            "InputPath": "$.AggregateProgComp",
                                            "Resource": "${StepFunctionsActivity}",
                                            "TimeoutSeconds": 600,
                                            "HeartbeatSeconds": 600,
                                            "ResultPath": "$.AggregateProgComp",
                                            "Next": "BuildAggregateProgCompDate"
                                        },
                                        "BuildAggregateProgCompDate": {
                                            "Type": "Task",
                                            "Resource": "${LambdaPrepareAggregateProgCompDate.Arn}",
                                            "ResultPath": "$.AggregateProgCompDate",
                                            "Next": "AggregateProgCompDate"
                                        },
                                        "AggregateProgCompDate": {
                                            "Type": "Task",
                                            "InputPath": "$.AggregateProgCompDate",
                                            "Resource": "${StepFunctionsActivity}",
                                            "TimeoutSeconds": 600,
                                            "HeartbeatSeconds": 600,
                                            "ResultPath": "$.AggregateProgCompDate",
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "BuildAggregateSessionContext",
                                    "States": {
                                        "BuildAggregateSessionContext": {
                                            "Type": "Task",
                                            "Resource": "${LambdaPrepareAggregateSession.Arn}",
                                            "ResultPath": "$.AggregateSession",
                                            "Next": "AggregateSession"
                                        },
                                        "AggregateSession": {
                                            "Type": "Task",
                                            "InputPath": "$.AggregateSession",
                                            "Resource": "${StepFunctionsActivity}",
                                            "TimeoutSeconds": 600,
                                            "HeartbeatSeconds": 600,
                                            "ResultPath": "$.AggregateSession",
                                            "Next": "BuildAggregateDateUserContext"
                                        },
                                        "BuildAggregateDateUserContext": {
                                            "Type": "Task",
                                            "Resource": "${LambdaPrepareAggregateDateUser.Arn}",
                                            "ResultPath": "$.AggregateDateUser",
                                            "Next": "AggregateDateUser"
                                        },
                                        "AggregateDateUser": {
                                            "Type": "Task",
                                            "InputPath": "$.AggregateDateUser",
                                            "Resource": "${StepFunctionsActivity}",
                                            "TimeoutSeconds": 600,
                                            "HeartbeatSeconds": 600,
                                            "ResultPath": "$.AggregateDateUser",
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "BuildAggregateTwominContext",
                                    "States": {
                                        "BuildAggregateTwominContext": {
                                            "Type": "Task",
                                            "Resource": "${LambdaPrepareAggregateTwomin.Arn}",
                                            "ResultPath": "$.AggregateTwomin",
                                            "Next": "AggregateTwomin"
                                        },
                                        "AggregateTwomin": {
                                            "Type": "Task",
                                            "InputPath": "$.AggregateTwomin",
                                            "Resource": "${StepFunctionsActivity}",
                                            "TimeoutSeconds": 600,
                                            "HeartbeatSeconds": 600,
                                            "ResultPath": "$.AggregateTwomin",
                                            "End": true
                                        }
                                    }
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": null,
                            "Next": "Aggregate2"
                        },
                        "Aggregate2": {
                            "Type": "Parallel",
                            "Branches": [
                                {
                                    "StartAt": "BuildAggregateTeamContext",
                                    "States": {
                                        "BuildAggregateTeamContext": {
                                            "Type": "Task",
                                            "Resource": "${LambdaPrepareAggregateTeam.Arn}",
                                            "ResultPath": "$.AggregateTeam",
                                            "Next": "AggregateTeam"
                                        },
                                        "AggregateTeam": {
                                            "Type": "Task",
                                            "InputPath": "$.AggregateTeam",
                                            "Resource": "${StepFunctionsActivity}",
                                            "TimeoutSeconds": 600,
                                            "HeartbeatSeconds": 600,
                                            "ResultPath": "$.AggregateTeam",
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "BuildAggregateTrainingGroupContext",
                                    "States": {
                                        "BuildAggregateTrainingGroupContext": {
                                            "Type": "Task",
                                            "Resource": "${LambdaPrepareAggregateTrainingGroup.Arn}",
                                            "ResultPath": "$.AggregateTrainingGroup",
                                            "Next": "AggregateTrainingGroup"
                                        },
                                        "AggregateTrainingGroup": {
                                            "Type": "Task",
                                            "InputPath": "$.AggregateTrainingGroup",
                                            "Resource": "${StepFunctionsActivity}",
                                            "TimeoutSeconds": 600,
                                            "HeartbeatSeconds": 600,
                                            "ResultPath": "$.AggregateTrainingGroup",
                                            "End": true
                                        }
                                    }
                                }
                            ],
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": null,
                            "Next": "Post"
                        },
                        "Post": {
                            "Type": "Parallel",
                            "Branches": [
                                {
                                    "StartAt": "BuildCleanupContext",
                                    "States": {
                                        "BuildCleanupContext": {
                                            "Type": "Task",
                                            "Resource": "${LambdaPrepareCleanup.Arn}",
                                            "ResultPath": "$.Cleanup",
                                            "Next": "Cleanup"
                                        },
                                        "Cleanup": {
                                            "Type": "Task",
                                            "InputPath": "$.Cleanup",
                                            "Resource": "${StepFunctionsActivity}",
                                            "TimeoutSeconds": 600,
                                            "HeartbeatSeconds": 600,
                                            "ResultPath": "$.Cleanup",
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "PassStatusComplete",
                                    "States": {
                                        "PassStatusComplete": {
                                            "Type": "Pass",
                                            "Result": "PROCESSING_COMPLETE",
                                            "ResultPath": "$.SourceEvent.SessionStatus",
                                            "Next": "MarkProcessingComplete"
                                        },
                                        "MarkProcessingComplete": {
                                            "Type": "Task",
                                            "Resource": "${LambdaUpdateStatus.Arn}",
                                            "InputPath": "$.SourceEvent",
                                            "OutputPath": null,
                                            "ResultPath": null,
                                            "End": true
                                        }
                                    }
                                }
                            ],
                            "ResultPath": "$.Cleanup",
                            "End": true
                        },
                        "ExceptionSkipProcessing": {
                            "Type": "Parallel",
                            "Branches": [
                                {
                                    "StartAt": "NotifyFailure0",
                                    "States": {
                                        "NotifyFailure0": {
                                            "Type": "Task",
                                            "Resource": "${LambdaNotifyFailure.Arn}",
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "PassStatus1",
                                    "States": {
                                        "PassStatus1": {
                                            "Type": "Pass",
                                            "Result": "PROCESSING_SKIPPED",
                                            "ResultPath": "$.SourceEvent.SessionStatus",
                                            "Next": "UpdateStatus1"
                                        },
                                        "UpdateStatus1": {
                                            "Type": "Task",
                                            "Resource": "${LambdaUpdateStatus.Arn}",
                                            "InputPath": "$.SourceEvent",
                                            "OutputPath": null,
                                            "ResultPath": null,
                                            "End": true
                                        }
                                    }
                                }
                            ],
                            "ResultPath": null,
                            "Next": "ExceptionStop"
                        },
                        "ExceptionFailProcessing": {
                            "Type": "Parallel",
                            "Branches": [
                                {
                                    "StartAt": "NotifyFailure1",
                                    "States": {
                                        "NotifyFailure1": {
                                            "Type": "Task",
                                            "Resource": "${LambdaNotifyFailure.Arn}",
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "PassStatus2",
                                    "States": {
                                        "PassStatus2": {
                                            "Type": "Pass",
                                            "Result": "PROCESSING_FAILED",
                                            "ResultPath": "$.SourceEvent.SessionStatus",
                                            "Next": "UpdateStatus2"
                                        },
                                        "UpdateStatus2": {
                                            "Type": "Task",
                                            "Resource": "${LambdaUpdateStatus.Arn}",
                                            "InputPath": "$.SourceEvent",
                                            "OutputPath": null,
                                            "ResultPath": null,
                                            "End": true
                                        }
                                    }
                                }
                            ],
                            "ResultPath": null,
                            "Next": "ExceptionStop"
                        },
                        "ExceptionStop": {
                            "Type": "Fail"
                        }
                    }
                }

            RoleArn: { "Fn::ImportValue" : "StepFunctionsServiceRole" }
            StateMachineName: { "Fn::Sub": "preprocessing-${Environment}" }

Outputs:
    ActivityArn:
        Description: "The ARN of the Batch Activity"
        Value: { Ref: "StepFunctionsActivity" }
    LinearitySqsQueueName:
        Description: "The name of the linearity-enforcing SQS Queue"
        Value: { Ref: "LinearityEnforcingQueue" }
    StateMachineArn:
        Description: "The ARN of the SFN state machine"
        Value: { Ref: "StateMachine" }
