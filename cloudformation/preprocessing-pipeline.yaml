# A template that creates the processing pipeline for biometric data
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a pre-processing pipeline"

Parameters:

    Environment:
        Type: "String"
        Description: "The name of the Environment"

    BatchJobVersion:
        Type: "String"
        Description: "The version of the batch jobs to run"

Mappings:
    TemplateVersion:
        Self: { Commit: "da39a3ee5e6b4b0d3255bfef95601890afd80709" }
    BatchJobResources:
        downloadandchunk:       { Memory: 2048, Vcpus: 2 }
        transformandplacement:  { Memory: 4096, Vcpus: 2 }
        sessionprocess2:        { Memory: 1024, Vcpus: 2 }
        scoring:                { Memory: 7650, Vcpus: 2 }
        aggregatesession:       { Memory: 7650, Vcpus: 2 }
        aggregateblocks:        { Memory: 7650, Vcpus: 2 }
        advancedstats:          { Memory: 7650, Vcpus: 2 }
        aggregatetwomin:        { Memory: 2048, Vcpus: 2 }
        aggregatedateuser:      { Memory: 512,  Vcpus: 1 }
        aggregateteam:          { Memory: 512,  Vcpus: 1 }
        aggregatetraininggroup: { Memory: 512,  Vcpus: 1 }
        aggregateprogcomp:      { Memory: 7650, Vcpus: 2 }
        aggregateprogcompdate:  { Memory: 512,  Vcpus: 1 }
        cleanup:                { Memory: 256,  Vcpus: 1 }

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterLabels:
            Environment: { default: "Environment" }
            BatchJobVersion: { default: "Application Code version" }

Resources:

    ##########################################################################################################
    ##  IAM
    ##########################################################################################################

    LambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                          - "cloudwatch:PutMetricData"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "sns:Publish"
                          - "lambda:InvokeFunction"
                          - "s3:ListBucket"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "ssm:DescribeParameters"
                          - "ssm:GetParameters"
                          - "kms:Decrypt"
                        Effect: "Allow"
                        Resource:
                          - "*" # TODO this should be segregated by environment somehow

                      - Action:
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/preprocessing-${Environment}-ingest-*" }

            RoleName: { "Fn::Sub": "preprocessing-${Environment}-lambda-${AWS::Region}" }

    BatchExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "ecs-tasks.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "s3:GetObject"
                          - "s3:ListBucket"
                        Effect: "Allow"
                        Resource:
                          - "arn:aws:s3:::biometrix-globalmodels"
                          - "arn:aws:s3:::biometrix-globalmodels/*"
                          - { "Fn::Sub": "arn:aws:s3:::biometrix-preprocessing-${Environment}-${AWS::Region}" }
                          - { "Fn::Sub": "arn:aws:s3:::biometrix-preprocessing-${Environment}-${AWS::Region}/*" }

                      - Action:
                          - "s3:GetObject"
                          - "s3:ListBucket"
                          - "s3:PutObject"
                        Effect: "Allow"
                        Resource:
                          - "arn:aws:s3:::biometrix-decode"
                          - "arn:aws:s3:::biometrix-decode/*"
                          - { "Fn::Sub": "arn:aws:s3:::biometrix-preprocessing-${Environment}-${AWS::Region}-advanced-stats"}
                          - { "Fn::Sub": "arn:aws:s3:::biometrix-preprocessing-${Environment}-${AWS::Region}-advanced-stats/*"}

                      - Action:
                          - "ssm:DescribeParameters"
                          - "ssm:GetParameters"
                          - "kms:Decrypt"
                        Effect: "Allow"
                        Resource: "*" # TODO this should be segregated by environment somehow

                      - Action:
                          - "cloudwatch:PutMetricData"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/preprocessing-${Environment}-ingest-*" }

                      - Action:
                          - "secretsmanager:GetSecretValue"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:preprocessing/${Environment}/*" }

                      - Action:
                          - "lambda:InvokeFunction"
                        Effect: "Allow"
                        Resource:
                          - { "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:users-${Environment}-apigateway-serviceauth" }
                          - { "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:users-${Environment}-apigateway-serviceauth:2_0" }

            RoleName: { "Fn::Sub": "preprocessing-${Environment}-execute-${AWS::Region}" }

    ##########################################################################################################
    ##  BATCH
    ##########################################################################################################

    BatchJobImage:
        Type: "Custom::CodeBuildEcrImage"
        Properties:
            ServiceToken: { "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:preprocessing-infrastructure-batchjob-trigger" }
            EcrImageTag: { Ref: "BatchJobVersion" }

    BatchJobDefinition:
        Type: "AWS::Batch::JobDefinition"
        Properties:
            Type: "container"
            Parameters: { "Meta": "{}", "Input": "{}" }
            ContainerProperties:
                Command: [ "Ref::Job" ]
                Environment:
                  - { Name: "AWS_DEFAULT_REGION", Value: { Ref: "AWS::Region" } }
                  - { Name: "ENVIRONMENT", Value: { Ref: "Environment" } }
                Image: { Ref: "BatchJobImage" }
                JobRoleArn: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/preprocessing-${Environment}-execute-${AWS::Region}" }
                Memory: 512
                MountPoints:
                  - SourceVolume: 'efs'
                    ContainerPath: '/net/efs'
                Privileged: true
                ReadonlyRootFilesystem: false
                Vcpus: 2
                Volumes:
                  - Name: 'efs'
                    Host:
                        SourcePath: '/net/efs'
            JobDefinitionName: { "Fn::Sub": "preprocessing-${Environment}-batchjob" }
            RetryStrategy:
                Attempts: 1

    ##########################################################################################################
    ##  LAMBDA
    ##########################################################################################################

    LambdaUnpackParallelResults:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    def handler(input, _):
                        for branch in input['_Unpack']:
                            for k, v in branch.items():
                                input[k] = v
                        del input['_Unpack']
                        return input
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-unpackparallelresults" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-unpackparallelresults" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaJobNames:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    def handler(session_id, _):
                        jobs = [
                            'advancedstats',
                            'aggregateblocks',
                            'aggregateblocks1',
                            'cleanup',
                            'downloadandchunk',
                            'scoring',
                            'scoring1',
                            'sessionprocess',
                            'sessionprocess1',
                            'transformandplacement',
                        ]
                        return {j: f"{session_id}_{j}" for j in jobs}
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "5"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-batchjobnames" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-batchjobnames" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    LambdaArrayProperties:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    def handler(value, _):
                        return {"Size": int(value)} if int(value) > 1 else {}
            Handler: "index.handler"
            Runtime: "python3.7"
            Timeout: "5"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-arrayproperties" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-arrayproperties" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    ##########################################################################################################
    ##  SNS
    ##########################################################################################################

    SnsFailureTopic:
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: "Biometrix preprocessing failure notification"
            TopicName: { "Fn::Sub": "preprocessing-${Environment}-failure" }

    SnsDataQualityTopic:
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: "PreProcessing data quality issue notifications"
            TopicName: { "Fn::Sub": "preprocessing-${Environment}-dataquality" }

    SnsDataQualitySubscriptionDipesh:
        Type: "AWS::SNS::Subscription"
        Properties:
            Endpoint: { "Fn::Sub": "dipesh+dataquality-${Environment}@fathomai.com" }
            Protocol: "email"
            TopicArn: { Ref: "SnsDataQualityTopic" }

    SnsDataQualitySubscriptionGabby:
        Type: "AWS::SNS::Subscription"
        Properties:
            Endpoint: { "Fn::Sub": "gabby+dataquality-${Environment}@fathomai.com" }
            Protocol: "email"
            TopicArn: { Ref: "SnsDataQualityTopic" }

    ##########################################################################################################
    ##  STEP FUNCTIONS
    ##########################################################################################################

    StateMachine:
        Type: "AWS::StepFunctions::StateMachine"
        Properties:
            DefinitionString: !Sub |
                {
                    "StartAt": "JobNames",
                    "States": {
                        "JobNames": {
                            "Type": "Task",
                            "Resource": "${LambdaJobNames.Arn}",
                            "InputPath": "$.SourceEvent.SessionId",
                            "ResultPath": "$._BatchJobNames",
                            "Next": "UpdateStatus0"
                        },
                        "UpdateStatus0": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::dynamodb:updateItem",
                            "Parameters": {
                                "TableName": "preprocessing-${Environment}-ingest-sessions",
                                "Key": {
                                    "id": { "S.$": "$.SourceEvent.SessionId" }
                                },
                                "AttributeUpdates": {
                                    "session_status": { "Action": "PUT", "Value": { "S": "PROCESSING_IN_PROGRESS" } }
                                }
                            },
                            "ResultPath": "$.ReadDatabase",
                            "Next": "DownloadAndChunk"
                        },
                        "DownloadAndChunk": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::batch:submitJob.sync",
                            "Parameters": {
                                "JobDefinition": "${BatchJobDefinition}",
                                "JobName.$": "$._BatchJobNames.downloadandchunk",
                                "JobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                "Parameters": {
                                    "Job": "downloadandchunk"
                                },
                                "ContainerOverrides": {
                                    "Memory": 2048,
                                    "Vcpus": 2,
                                    "Environment": [
                                        { "Name": "SESSION_ID", "Value.$": "$.SourceEvent.SessionId" }
                                    ]
                                },
                                "RetryStrategy": {
                                    "Attempts": 2
                                }
                           },
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                           "ResultPath": "$.TaskResult",
                           "Next": "TransformAndPlacement"
                        },
                        "TransformAndPlacement": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::batch:submitJob.sync",
                            "Parameters": {
                                "JobDefinition": "${BatchJobDefinition}",
                                "JobName.$": "$._BatchJobNames.transformandplacement",
                                "JobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                "Parameters": {
                                    "Job": "transformandplacement"
                                },
                                "ContainerOverrides": {
                                    "Memory": 4096,
                                    "Vcpus": 2,
                                    "Environment": [
                                        { "Name": "SESSION_ID", "Value.$": "$.SourceEvent.SessionId" }
                                    ]
                                },
                                "RetryStrategy": {
                                    "Attempts": 2
                                }
                            },
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$.TaskResult",
                            "Next": "ReadDatabase0"
                        },
                        "ReadDatabase0": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::dynamodb:getItem",
                            "Parameters": {
                                "TableName": "preprocessing-${Environment}-ingest-sessions",
                                "Key": {
                                    "id": { "S.$": "$.SourceEvent.SessionId" }
                                },
                                "ProjectionExpression": "id, sensors"
                            },
                            "ResultPath": "$.ReadDatabase",
                            "Next": "SensorChoice"
                        },
                        "SensorChoice": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                  "Variable": "$.ReadDatabase.Item.sensors.N",
                                  "StringEquals": "1",
                                  "Next": "SessionProcess1"
                                },
                                {
                                  "Variable": "$.ReadDatabase.Item.sensors.N",
                                  "StringEquals": "3",
                                  "Next": "ReadDatabase1"
                                }
                            ],
                            "Default": "ExceptionFailProcessing"
                        },
                        "SessionProcess1": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::batch:submitJob.sync",
                            "Parameters": {
                                "JobDefinition": "${BatchJobDefinition}",
                                "JobName.$": "$._BatchJobNames.sessionprocess1",
                                "JobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                "Parameters": {
                                    "Job": "sessionprocess1"
                                },
                                "ContainerOverrides": {
                                    "Memory": 1024,
                                    "Vcpus": 2,
                                    "Environment": [
                                        { "Name": "SESSION_ID", "Value.$": "$.SourceEvent.SessionId" }
                                    ]
                                },
                                "RetryStrategy": {
                                    "Attempts": 2
                                }
                            },
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$.TaskResult",
                            "Next": "Scoring1"
                        },
                        "Scoring1": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::batch:submitJob.sync",
                            "Parameters": {
                                "JobDefinition": "${BatchJobDefinition}",
                                "JobName.$": "$._BatchJobNames.scoring1",
                                "JobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                "Parameters": {
                                    "Job": "scoring1"
                                },
                                "ContainerOverrides": {
                                    "Memory": 1024,
                                    "Vcpus": 2,
                                    "Environment": [
                                        { "Name": "SESSION_ID", "Value.$": "$.SourceEvent.SessionId" }
                                    ]
                                },
                                "RetryStrategy": {
                                    "Attempts": 2
                                }
                            },
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$.TaskResult",
                            "Next": "AggregateBlocks1"
                        },
                        "AggregateBlocks1": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::batch:submitJob.sync",
                            "Parameters": {
                                "JobDefinition": "${BatchJobDefinition}",
                                "JobName.$": "$._BatchJobNames.aggregateblocks1",
                                "JobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                "Parameters": {
                                    "Job": "aggregateblocks1"
                                },
                                "ContainerOverrides": {
                                    "Memory": 7650,
                                    "Vcpus": 2,
                                    "Environment": [
                                        { "Name": "SESSION_ID", "Value.$": "$.SourceEvent.SessionId" }
                                    ]
                                },
                                "RetryStrategy": {
                                    "Attempts": 2
                                }
                            },
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$.TaskResult",
                            "Next": "Post"
                        },
                        "ReadDatabase1": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::dynamodb:getItem",
                            "Parameters": {
                                "TableName": "preprocessing-${Environment}-ingest-sessions",
                                "Key": {
                                    "id": { "S.$": "$.SourceEvent.SessionId" }
                                },
                                "ProjectionExpression": "id, transformandplacement_chunk_count"
                            },
                            "ResultPath": "$.ReadDatabase",
                            "Next": "BuildArrayProperties"
                        },
                        "BuildArrayProperties": {
                            "Type": "Task",
                            "Resource": "${LambdaArrayProperties.Arn}",
                            "InputPath": "$.ReadDatabase.Item.transformandplacement_chunk_count.N",
                            "ResultPath": "$.ArrayProperties",
                            "Next": "SessionProcess"
                        },
                        "SessionProcess": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::batch:submitJob.sync",
                            "Parameters": {
                                "JobDefinition": "${BatchJobDefinition}",
                                "JobName.$": "$._BatchJobNames.sessionprocess",
                                "JobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                "Parameters": {
                                    "Job": "sessionprocess"
                                },
                                "ArrayProperties.$": "$.ArrayProperties",
                                "ContainerOverrides": {
                                    "Memory": 4096,
                                    "Vcpus": 2,
                                    "Environment": [
                                        { "Name": "SESSION_ID", "Value.$": "$.SourceEvent.SessionId" }
                                    ]
                                },
                                "RetryStrategy": {
                                    "Attempts": 2
                                }
                            },
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$.TaskResult",
                            "Next": "Scoring"
                        },
                        "Scoring": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::batch:submitJob.sync",
                            "Parameters": {
                                "JobDefinition": "${BatchJobDefinition}",
                                "JobName.$": "$._BatchJobNames.scoring",
                                "JobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                "Parameters": {
                                    "Job": "scoring"
                                },
                                "ContainerOverrides": {
                                    "Memory": 1024,
                                    "Vcpus": 2,
                                    "Environment": [
                                        { "Name": "SESSION_ID", "Value.$": "$.SourceEvent.SessionId" }
                                    ]
                                },
                                "RetryStrategy": {
                                    "Attempts": 2
                                }
                            },
                            "Catch": [
                                {
                                    "ErrorEquals": [ "NoHistoricalDataException" ],
                                    "Next": "ExceptionSkipProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                },
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$.TaskResult",
                            "Next": "AggregateBlocks"
                        },
                        "AggregateBlocks": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::batch:submitJob.sync",
                            "Parameters": {
                                "JobDefinition": "${BatchJobDefinition}",
                                "JobName.$": "$._BatchJobNames.aggregateblocks",
                                "JobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                "Parameters": {
                                    "Job": "aggregateblocks"
                                },
                                "ContainerOverrides": {
                                    "Memory": 7650,
                                    "Vcpus": 2,
                                    "Environment": [
                                        { "Name": "SESSION_ID", "Value.$": "$.SourceEvent.SessionId" }
                                    ]
                                },
                                "RetryStrategy": {
                                    "Attempts": 2
                                }
                            },
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$.TaskResult",
                            "Next": "AdvancedStats"
                        },
                        "AdvancedStats": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::batch:submitJob.sync",
                            "Parameters": {
                                "JobDefinition": "${BatchJobDefinition}",
                                "JobName.$": "$._BatchJobNames.advancedstats",
                                "JobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                "Parameters": {
                                    "Job": "advancedstats"
                                },
                                "ContainerOverrides": {
                                    "Memory": 7650,
                                    "Vcpus": 2,
                                    "Environment": [
                                        { "Name": "SESSION_ID", "Value.$": "$.SourceEvent.SessionId" }
                                    ]
                                },
                                "RetryStrategy": {
                                    "Attempts": 2
                                }
                            },
                            "Catch": [
                                {
                                    "ErrorEquals": [ "States.ALL" ],
                                    "Next": "ExceptionFailProcessing",
                                    "ResultPath": "$._ExceptionOutput"
                                }
                            ],
                            "ResultPath": "$.TaskResult",
                            "Next": "Post"
                        },
                        "Post": {
                            "Type": "Parallel",
                            "Branches": [
                                {
                                    "StartAt": "Cleanup",
                                    "States": {
                                        "Cleanup": {
                                            "Type": "Task",
                                            "Resource": "arn:aws:states:::batch:submitJob.sync",
                                            "Parameters": {
                                                "JobDefinition": "${BatchJobDefinition}",
                                                "JobName.$": "$._BatchJobNames.cleanup",
                                                "JobQueue": "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/preprocessing-${Environment}-compute",
                                                "Parameters": {
                                                    "Job": "cleanup"
                                                },
                                                "ContainerOverrides": {
                                                    "Memory": 256,
                                                    "Vcpus": 2,
                                                    "Environment": [
                                                        { "Name": "SESSION_ID", "Value.$": "$.SourceEvent.SessionId" }
                                                    ]
                                                },
                                                "RetryStrategy": {
                                                    "Attempts": 2
                                                }
                                            },
                                            "ResultPath": "$.TaskResult",
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "UpdateStatus1",
                                    "States": {
                                        "UpdateStatus1": {
                                            "Type": "Task",
                                            "Resource": "arn:aws:states:::dynamodb:updateItem",
                                            "Parameters": {
                                              "TableName": "preprocessing-${Environment}-ingest-sessions",
                                              "Key": {
                                                "id": { "S.$": "$.SourceEvent.SessionId" }
                                              },
                                              "AttributeUpdates": {
                                                "session_status": { "Action": "PUT", "Value": { "S": "PROCESSING_COMPLETE" } }
                                              }
                                            },
                                            "End": true
                                        }
                                    }
                                }
                            ],
                            "ResultPath": "$.Cleanup",
                            "End": true
                        },
                        "ExceptionSkipProcessing": {
                            "Type": "Parallel",
                            "Branches": [
                                {
                                    "StartAt": "NotifyFailure0",
                                    "States": {
                                        "NotifyFailure0": {
                                            "Type": "Task",
                                            "Resource": "arn:aws:states:::sns:publish",
                                            "Parameters": {
                                                "TopicArn": "${SnsFailureTopic}",
                                                "Message.$": "$.SourceEvent.SessionId",
                                                "MessageAttributes": {
                                                    "session_id": {
                                                        "DataType": "String",
                                                        "StringValue.$": "$.SourceEvent.SessionId"
                                                    }
                                                }
                                            },
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "UpdateStatus2",
                                    "States": {
                                        "UpdateStatus2": {
                                            "Type": "Task",
                                            "Resource": "arn:aws:states:::dynamodb:updateItem",
                                            "Parameters": {
                                                "TableName": "preprocessing-${Environment}-ingest-sessions",
                                                "Key": { "id": { "S.$": "$.SourceEvent.SessionId" } },
                                                "AttributeUpdates": {
                                                    "session_status": { "Action": "PUT", "Value": { "S": "PROCESSING_SKIPPED" } }
                                                }
                                            },
                                            "End": true
                                        }
                                    }
                                }
                            ],
                            "ResultPath": null,
                            "Next": "ExceptionStop"
                        },
                        "ExceptionFailProcessing": {
                            "Type": "Parallel",
                            "Branches": [
                                {
                                    "StartAt": "NotifyFailure1",
                                    "States": {
                                        "NotifyFailure1": {
                                            "Type": "Task",
                                            "Resource": "arn:aws:states:::sns:publish",
                                            "Parameters": {
                                                "TopicArn": "${SnsFailureTopic}",
                                                "Message.$": "$.SourceEvent.SessionId",
                                                "MessageAttributes": {
                                                    "session_id": {
                                                        "DataType": "String",
                                                        "StringValue.$": "$.SourceEvent.SessionId"
                                                    }
                                                }
                                            },
                                            "End": true
                                        }
                                    }
                                },
                                {
                                    "StartAt": "UpdateStatus3",
                                    "States": {
                                        "UpdateStatus3": {
                                            "Type": "Task",
                                            "Resource": "arn:aws:states:::dynamodb:updateItem",
                                            "Parameters": {
                                                "TableName": "preprocessing-${Environment}-ingest-sessions",
                                                "Key": { "id": { "S.$": "$.SourceEvent.SessionId" } },
                                                "AttributeUpdates": {
                                                    "session_status": { "Action": "PUT", "Value": { "S": "PROCESSING_FAILED" } }
                                                }
                                            },
                                            "End": true
                                        }
                                    }
                                }
                            ],
                            "ResultPath": null,
                            "Next": "ExceptionStop"
                        },
                        "ExceptionStop": {
                            "Type": "Fail"
                        }
                    }
                }


            RoleArn: { "Fn::ImportValue" : "ServiceRoleStepFunctions" }
            StateMachineName: { "Fn::Sub": "preprocessing-${Environment}" }
            # TODO tags are supported, but not implemented in CF yet

Outputs:
    StateMachineArn:
        Description: "The ARN of the SFN state machine"
        Value: { Ref: "StateMachine" }
