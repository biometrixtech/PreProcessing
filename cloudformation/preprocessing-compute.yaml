# A template that creates a compute environment
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a Batch Compute Environment for the pre-processing pipeline"

Parameters:

    # Environment name
    Environment:
        Type: "String"
        Description: "The name of the environment"

    MultiAz:
        Type: "String"
        AllowedValues: [ "true", "false" ]
        Description: "Whether to create instances in multiple AZs.  This has an additional cost."

    VpcId:
        Type: "String"
        Description: "ID of the VPC"

    VpcCidr:
        Type: "Number"
        MinValue: 0
        MaxValue: 255
        Description: "The second digit in the IP range (10.xx.0.0/16).  VPNs with overlapping address spaces cannot be peered."

    PrivateHostedZoneId:
        Type: "String"
        Description: "The ID of the private hosted zone"

    PrivateSubnetAlphaId:
        Type: "String"
        Description: "The ID of private subnet alpha"

    PrivateSubnetBetaId:
        Type: "String"
        Description: "The ID of private subnet beta"

    PublicSubnetAlphaId:
        Type: "String"
        Description: "The ID of public subnet alpha"

    InstanceSize:
        Type: "CommaDelimitedList"
        AllowedValues: [
            "c3", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
            "c4", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
            "d2", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
            "f1", "f1.2xlarge", "f1.16xlarge",
            "g2", "g2.2xlarge", "g2.8xlarge",
            "i2", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
            "i3", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge",
            "m3", "m3.medium", "m3.large", "m3.2xlarge", "m3.xlarge",
            "m4", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
            "optimal",
            "p2", "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
            "r3", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
            "r4", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
            "x1", "x1.16xlarge", "x1.32xlarge"
        ]
        Description: "What type the EC2 instances should be"

    Ami:
        Type: "AWS::EC2::Image::Id"
        Default: "ami-45224425"
        Description: "The AMI to build the Compute Environment EC2 instances from"

    Keypair:
        Type: "String"
        Default: ""
        Description: "A SSH keypair to grant access to instances"

Mappings:
    TemplateVersion:
        Self: { Commit: "da39a3ee5e6b4b0d3255bfef95601890afd80709" }
        
Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Definition" }
            Parameters:
              - "Environment"

          - Label: { default: "Networking" }
            Parameters:
              - "MultiAz"
              - "PrivateHostedZoneId"
              - "PrivateSubnetAlphaId"
              - "PrivateSubnetBetaId"
              - "PublicSubnetAlphaId"
              - "VpcId"
              - "VpcCidr"

          - Label: { default: "Configuration" }
            Parameters:
              - "Ami"
              - "InstanceSize"
              - "Keypair"

        ParameterLabels:
            Ami: { default: "EC2 AMI" }
            Environment: { default: "Environment" }
            InstanceSize: { default: "EC2 Instance Size" }
            Keypair: { default: "EC2 Keypair" }
            MultiAz: { default: "Multi AZ?" }
            PrivateHostedZoneId: { default: "Private Hosted Zone ID" }
            PrivateSubnetAlphaId: { default: "Private Subnet Alpha ID" }
            PrivateSubnetBetaId: { default: "Private Subnet Alpha ID" }
            PublicSubnetAlphaId: { default: "Public Subnet Alpha ID" }
            VpcCidr: { default: "VPC CIDR block" }

Conditions:
    MultiAz: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "MultiAz" }, "false" ] } ] }
    AllowSsh: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "Keypair" }, "" ] } ] }

Resources:

    ##########################################################################################################
    ##  EFS
    ##########################################################################################################

    EfsSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupName: { "Fn::Sub": "preprocessing-${Environment}-compute-efs" }
            GroupDescription: "Security group which allows access to the Elastic File System"
            VpcId: { Ref: "VpcId" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute-efs" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    EfsSecurityGroupSelfReference:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            GroupId: { Ref: "EfsSecurityGroup" }
            IpProtocol: "tcp"
            FromPort: "0"
            ToPort: "65535"
            SourceSecurityGroupId: { Ref: "EfsSecurityGroup" }

    EfsFileSystem:
        Type: "AWS::EFS::FileSystem"
        Properties:
            FileSystemTags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
            PerformanceMode: "generalPurpose"

    EfsMountTargetAlpha:
        Type: "AWS::EFS::MountTarget"
        Properties:
            FileSystemId: { Ref: "EfsFileSystem" }
            SecurityGroups:
              - { Ref: "EfsSecurityGroup" }
            SubnetId: { Ref: "PrivateSubnetAlphaId" }

    EfsMountTargetBeta:
        Type: "AWS::EFS::MountTarget"
        Properties:
            FileSystemId: { Ref: "EfsFileSystem" }
            SecurityGroups:
              - { Ref: "EfsSecurityGroup" }
            SubnetId: { Ref: "PrivateSubnetBetaId" }
        Condition: "MultiAz"

    EfsDnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
          HostedZoneId: { Ref: "PrivateHostedZoneId" }
          Name: "efs.internal"
          Type: "CNAME"
          TTL: '600'
          ResourceRecords:
            - { "Fn::Sub": "${EfsFileSystem}.efs.${AWS::Region}.amazonaws.com." }

    ##########################################################################################################
    ##  KMS
    ##########################################################################################################

    ParameterStoreKey:
        Type: "AWS::KMS::Key"
        Properties:
            Description: { "Fn::Sub": "Encryption for configuration parameters in the ${Environment} cluster" }
            Enabled: true
            EnableKeyRotation: false
            KeyPolicy:
                Version: "2012-10-17"
                Id: "default"
                Statement:
                  - Sid: "Enable IAM User Permissions"
                    Effect: "Allow"
                    Principal:
                        AWS: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root" }
                    Action: "kms:*"
                    Resource: "*"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "compute" }

    ParameterStoreKeyAlias:
        Type: "AWS::KMS::Alias"
        Properties:
            AliasName: { "Fn::Sub": "alias/preprocessing/${Environment}" }
            TargetKeyId: { Ref: "ParameterStoreKey" }

    ##########################################################################################################
    ##  EC2
    ##########################################################################################################

    Ec2InstanceStartupRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "ec2.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "ecs:StartTask"
                          - "iam:PassRole"
                        Effect: "Allow"
                        Resource:
                          - { Ref: "XRayTaskDefinition" }
                          - { "Fn::Sub": [ "arn:aws:iam::${AWS::AccountId}:role/${ServiceRoleEcsTasks}", { ServiceRoleEcsTasks: { "Fn::ImportValue": 'ServiceRoleEcsTasks' } } ] }
            RoleName: { "Fn::Sub": "preprocessing-${Environment}-compute-ec2-${AWS::Region}" }

    Ec2InstanceStartupProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            Roles: [ { Ref: "Ec2InstanceStartupRole" } ]

    Ec2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group for preprocessing EC2 instances"
            GroupName: { "Fn::Sub": "preprocessing-${Environment}-compute-ec2" }
            VpcId: { Ref: "VpcId" }
            SecurityGroupIngress:
                # All ports open from internal access
              - IpProtocol: "tcp"
                FromPort: "0"
                ToPort: "65535"
                CidrIp: { "Fn::Sub": "10.${VpcCidr}.0.0/16" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute-ec2" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    Ec2SecurityGroupInternalSsh:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group allowing SSH access"
            GroupName: { "Fn::Sub": "preprocessing-${Environment}-compute-ec2-ssh" }
            VpcId: { Ref: "VpcId" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute-ec2-ssh" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    ##########################################################################################################
    ##  BATCH
    ##########################################################################################################

    XRayLogGroup:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: { "Fn::Sub": "preprocessing/${Environment}/compute-xray" }
            RetentionInDays: 14

    XRayTaskDefinition:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            Cpu: 256
            ContainerDefinitions:
              - Cpu: 256
                Environment:
                  - { Name: "AWS_DEFAULT_REGION", Value: { Ref: "AWS::Region" } }
                Image: "melonsoftware/aws-xray-daemon:3.0"
                LogConfiguration:
                    LogDriver: "awslogs"
                    Options:
                        awslogs-group: { Ref: "XRayLogGroup" }
                        awslogs-region: { Ref: "AWS::Region" }
                        awslogs-stream-prefix: "xray"
                Memory: 512
                Name: { "Fn::Sub": "preprocessing-${Environment}-compute-xray" }
                PortMappings:
                 - ContainerPort: 2000
                   HostPort: 2000
                   Protocol: "udp"
            ExecutionRoleArn: { "Fn::ImportValue": 'ServiceRoleEcsTasks' }
            Family: { "Fn::Sub": "preprocessing-${Environment}-compute-xray" }
            Memory: 512
            NetworkMode: "host"
            TaskRoleArn: { Ref: "AWS::NoValue" }

    LaunchTemplate:
        Type: "AWS::EC2::LaunchTemplate"
        Properties:
            LaunchTemplateName: { "Fn::Sub": "preprocessing-${Environment}-compute" }
            LaunchTemplateData:
                IamInstanceProfile:
                    Name: { Ref: "Ec2InstanceStartupProfile" }
                KeyName: { "Fn::If": [ "AllowSsh", { Ref: "Keypair" }, { Ref: "AWS::NoValue" } ] }
                TagSpecifications:
                  - ResourceType: "instance"
                    Tags:
                      - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute" } }
                      - { Key: "Management", Value: "managed" }
                      - { Key: "Project", Value: "preprocessing" }
                      - { Key: "Environment", Value: { Ref: "Environment" } }
                      - { Key: "Service", Value: "batch" }
                  - ResourceType: "volume"
                    Tags:
                      - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute" } }
                      - { Key: "Management", Value: "managed" }
                      - { Key: "Project", Value: "preprocessing" }
                      - { Key: "Environment", Value: { Ref: "Environment" } }
                      - { Key: "Service", Value: "batch" }
                UserData:
                    "Fn::Base64":
                        "Fn::Sub": |
                            MIME-Version: 1.0
                            Content-Type: multipart/mixed; boundary="==BOUNDARY=="

                            --==BOUNDARY==
                            Content-Type: text/cloud-config; charset="us-ascii"

                            packages:
                              - amazon-efs-utils
                              - aws-cli
                              - jq

                            runcmd:
                              - mkdir -p /net/efs
                              - echo "${EfsFileSystem}:/ /net/efs efs tls,_netdev" >> /etc/fstab
                              - mount -a -t efs defaults

                            --==BOUNDARY==
                            Content-Type: text/upstart-job; charset="us-ascii"

                            description "Amazon EC2 Container Service (start task on instance boot)"
                            author "Amazon Web Services"
                            start on started ecs

                            script
                                exec 2>>/var/log/ecs/ecs-start-task.log
                                set -x
                                until curl -s http://localhost:51678/v1/metadata
                                do
                                    sleep 1
                                done

                                # Grab the container instance ARN and AWS region from instance metadata
                                instance_arn=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $NF}' )
                                cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster' | awk -F/ '{print $NF}' )
                                region=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F: '{print $4}')

                                # Run the AWS CLI start-task command to start your task on this container instance
                                aws ecs start-task --cluster $cluster --task-definition ${XRayTaskDefinition} --container-instances $instance_arn --started-by $instance_arn --region $region
                            end script
                            --==BOUNDARY==--

    BatchComputeEnvironment:
        Type: "AWS::Batch::ComputeEnvironment"
        Properties:
#            ComputeEnvironmentName: { "Fn::Sub": [
#                "preprocessing-${Environment}-compute-${InstanceSize}",
#                { InstanceSize: { "Fn::Join": [ ",", { Ref: "InstanceSize" } ] } }
#             ] }
            ComputeResources:
                Ec2KeyPair: { "Fn::If": [ "AllowSsh", { Ref: "Keypair" }, { Ref: "AWS::NoValue" } ] }
                InstanceRole: { Ref: "Ec2InstanceStartupProfile" }
                InstanceTypes: { Ref: "InstanceSize" }
                LaunchTemplate:
                    LaunchTemplateId: { Ref: "LaunchTemplate" }
                    Version: { "Fn::GetAtt": [ "LaunchTemplate", "LatestVersionNumber" ] }
                MaxvCpus: 16
                MinvCpus: 0
                SecurityGroupIds:
                  - { Ref: "Ec2SecurityGroup" }
                  - { Ref: "EfsSecurityGroup" }
                  - { Ref: "Ec2SecurityGroupInternalSsh" }
                Subnets: { "Fn::If": [
                    "MultiAz",
                    [ { Ref: "PrivateSubnetAlphaId" }, { Ref: "PrivateSubnetBetaId" } ],
                    [ { Ref: "PrivateSubnetAlphaId" } ]
                ]}
#                Tags:
#                    Name: { "Fn::Sub": "preprocessing-${Environment}-compute" }
#                    Management: "managed"
#                    Project: "preprocessing"
#                    Environment: { Ref: "Environment" }
#                    Service: "batch"
                Type: "EC2"
            ServiceRole: { "Fn::ImportValue": "ServiceRoleBatch" }
            State: "ENABLED"
            Type: "MANAGED"

    BatchJobQueue:
        Type: "AWS::Batch::JobQueue"
        Properties:
            ComputeEnvironmentOrder:
              - ComputeEnvironment: { Ref: "BatchComputeEnvironment" }
                Order: 1
            JobQueueName: { "Fn::Sub": "preprocessing-${Environment}-compute" }
            Priority: 1
            State: "ENABLED"

    ExtractBatchEcsClusterName:
        Type: "Custom::CfnSnippet"
        Properties:
            ServiceToken: { "Fn::ImportValue": "CfsnippetsArn-infra" }
            Code: |
                import boto3, os
                ecs_client = boto3.client('ecs')
                compute_environment_name = os.environ['COMPUTE_ENVIRONMENT_ARN'].split('/')[-1]
                cluster_names = [arn.split('/')[-1] for arn in ecs_client.list_clusters()['clusterArns']]
                relevant_names = [name for name in cluster_names if name.startswith(compute_environment_name)]
                physical_resource_id = relevant_names[0] if len(relevant_names) else None
            Environment:
                Variables:
                    ENVIRONMENT: { Ref: "Environment" }
                    COMPUTE_ENVIRONMENT_ARN: { Ref: "BatchComputeEnvironment" }
        DependsOn:
          - "BatchComputeEnvironment"

    ##########################################################################################################
    ##  BASTION
    ##########################################################################################################

    Ec2SecurityGroupExternalSsh:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupName: { "Fn::Sub": "preprocessing-${Environment}-bastion-ssh" }
            GroupDescription: "Enable external SSH access"
            VpcId: { Ref: "VpcId" }
            SecurityGroupIngress:
              - IpProtocol: "tcp"
                FromPort: "22"
                ToPort: "22"
                CidrIp: "0.0.0.0/0"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-bastion-ssh" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
        Condition: "AllowSsh"

    Ec2SecurityGroupInternalSshRule:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            FromPort: "22"
            GroupId: { Ref: "Ec2SecurityGroupInternalSsh" }
            IpProtocol: "tcp"
            SourceSecurityGroupId: { Ref: "Ec2SecurityGroupExternalSsh" }
            ToPort: "22"
        Condition: "AllowSsh"

    BastionInstance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: { Ref: "Ami" }
            InstanceInitiatedShutdownBehavior: "stop"
            InstanceType: "t2.nano"
            KeyName: { Ref: "Keypair" }
            SecurityGroupIds: [ { Ref: "Ec2SecurityGroupExternalSsh" } ]
            SubnetId: { Ref: "PublicSubnetAlphaId" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-bastion" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "bastion" }
            UserData: ""
        Condition: "AllowSsh"

    BastionElasticIp:
        Type: "AWS::EC2::EIP"
        Properties:
            InstanceId: { Ref: "BastionInstance" }
            Domain: "vpc"
        Condition: "AllowSsh"

Outputs:

    EfsId:
        Description: "The id of the Elastic File System"
        Value: { Ref: "EfsFileSystem" }

    JobQueueArn:
        Description: "The ARN of the Job Queue"
        Value: { Ref: "BatchJobQueue" }

    ComputeEnvironmentArn:
        Description: "The ARN of the ComputeEnvironment"
        Value: { Ref: "BatchComputeEnvironment" }

    ComputeEnvironmentEcsClusterName:
        Description: "The name of the ComputeEnvironment ECS Cluster"
        Value: { Ref: "ExtractBatchEcsClusterName" }
