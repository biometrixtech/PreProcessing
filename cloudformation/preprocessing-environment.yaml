# A template that creates an environment
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates an environment for preprocessing Accessory data"

Parameters:

    # Environment name
    Environment:
        Type: "String"
        Description: "The name of the environment"

    # The second part of the CIDR block for the VPN (10.xx.0.0/24).
    VpnCidr:
        Type: "Number"
        MinValue: 0
        MaxValue: 255
        Description: "The second digit in the IP range (10.xx.0.0/16).  VPNs with overlapping address spaces cannot be peered."
    MultiAz:
        Type: "String"
        AllowedValues: [ "true", "false" ]
        Description: "Whether to create instances in multiple AZs.  This has an additional cost."
    MongoDbPeeringVpc:
        Type: "String"
        Default: ""
        Description: "MongoDB VPC ID"
    MongoDbPeeringCidr:
        Type: "String"
        Description: "MongoDB VPC CIDR range"
        Default: ""
        MaxLength: "18"
        AllowedPattern: "^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))|$"
        ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

    ComputeEc2InstanceSize:
        Type: "String"
        AllowedValues: [
            "c3", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
            "c4", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
            "d2", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
            "f1", "f1.2xlarge", "f1.16xlarge",
            "g2", "g2.2xlarge", "g2.8xlarge",
            "i2", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
            "i3", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge",
            "m3", "m3.medium", "m3.large", "m3.2xlarge", "m3.xlarge",
            "m4", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
            "optimal",
            "p2", "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
            "r3", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
            "r4", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
            "x1", "x1.16xlarge", "x1.32xlarge"
        ]
        Default: "m3.medium"
        Description: "What type the EC2 instances should be"
    ComputeEc2Ami:
        Type: "AWS::EC2::Image::Id"
        Default: "ami-835b4efa"
        Description: "The AMI to build the EC2 instances from"
    ComputeEc2Keypair:
        Type: "String"
        Description: "A SSH keypair to grant access to instances"

    CreateVpc:
        Type: "String"
        AllowedValues: [ "true", "false" ]
        Default: "false"
        Description: "Whether to create the VPC stack"
    CreateCompute:
        Type: "String"
        AllowedValues: [ "true", "false" ]
        Default: "false"
        Description: "Whether to create the compute stack"
    CreatePipeline:
        Type: "String"
        AllowedValues: [ "true", "false" ]
        Default: "false"
        Description: "Whether to create the pipeline stack"
    CreateIngest:
        Type: "String"
        AllowedValues: [ "true", "false" ]
        Default: "false"
        Description: "Whether to create the ingest stack"
    PollerTemplate:
        Type: "String"
        Default: "https://s3.amazonaws.com/biometrix-infrastructure/cloudformation/sfn-batch-poller.yaml"
        Description: "Path to an S3 file containing the CloudFormation template for the sfn-batch poller cluster"

    BatchJobVersion:
        Type: "String"
        Description: "The git commit hash of the `batchjob` code to deploy"
        AllowedPattern: "[a-f0-9]{40}"
        ConstraintDescription: "Must be a 40-hex-digit Git full commit hash"
    PollerVersion:
        Type: "String"
        Description: "The git commit hash of the `sfnbatch` poller to deploy"
        AllowedPattern: "[a-f0-9]{7}"
        ConstraintDescription: "Must be an 7-hex-digit Git short commit hash"

    AutoscalingSchedule:
        Type: "String"
        Default: ""
        Description: "A definition JSON string for autoscaling the compute cluster"

    DynamodbWriteCapacity:
        Default: 1
        Description: "The write capacity of the DynamoDb table"
        MinValue: 1
        Type: "Number"

Mappings:
    TemplateVersion:
        Self: { Commit: "da39a3ee5e6b4b0d3255bfef95601890afd80709" }

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Definition" }
            Parameters:
              - "Environment"
          - Label: { default: "Templates" }
            Parameters:
              - "CreateVpc"
              - "CreateCompute"
              - "CreatePipeline"
              - "CreateIngest"
              - "PollerTemplate"
          - Label: { default: "Configuration" }
            Parameters:
              - "MultiAz"
              - "VpnCidr"
              - "MongoDbPeeringVpc"
              - "MongoDbPeeringCidr"
              - "ComputeEc2InstanceSize"
              - "ComputeEc2Ami"
              - "ComputeEc2Keypair"
          - Label: { default: "Code versions" }
            Parameters:
              - "BatchJobVersion"
              - "PollerVersion"

        ParameterLabels:
            Environment: { default: "Environment" }
            MultiAz: { default: "Multi AZ?" }
            ComputeEc2InstanceSize: { default: "EC2 Instance Size" }
            ComputeEc2Ami: { default: "EC2 AMI" }
            ComputeEc2Keypair: { default: "EC2 Keypair" }
            CreateCompute: { default: "Create compute stack?" }
            CreatePipeline: { default: "Create pipieline stack?" }
            CreateIngest: { default: "Create ingest stack?" }
            PollerTemplate: { default: "CF template: sfn-batch poller" }
            BatchJobVersion: { default: "batchjob" }
            PollerVersion: { default: "sfnbatch poller" }
            MongoDbPeeringVpc: { default: "MongoDB VPN ID" }
            MongoDbPeeringCidr: { default: "MongoDB VPN CIDR" }

Conditions:
    CreateVpc: { "Fn::Equals": [ { Ref: "CreateVpc" }, "true" ] }
    CreateCompute: { "Fn::And": [ { Condition: "CreateVpc" }, { "Fn::Equals": [ { Ref: "CreateCompute" }, "true" ] } ] }
    CreatePipeline: { "Fn::And": [ { Condition: "CreateCompute" }, { "Fn::Equals": [ { Ref: "CreatePipeline" }, "true" ] } ] }
    CreateIngest: { "Fn::And": [ { Condition: "CreatePipeline" }, { "Fn::Equals": [ { Ref: "CreateIngest" }, "true" ] } ] }
    CreatePoller: { "Fn::And": [ { Condition: "CreatePipeline" }, { "Fn::Not": [ { "Fn::Equals": [ { Ref: "PollerTemplate" }, "" ] } ] } ] }
    CreateMonitoring: { "Fn::And": [ { "Condition": "CreateCompute" }, { "Condition": "CreatePipeline" } ] }

Resources:

    ##########################################################################################################
    ##  S3
    ##########################################################################################################

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: { "Fn::Sub": "biometrix-preprocessing-${Environment}-${AWS::Region}" }
            # A circular dependency exists here; you have to create the stack with `CreateIngest`=false to create the
            # S3 bucket first, then update the stack setting it true to create the ingest stack and then the rule here.
            NotificationConfiguration: { "Fn::If": [
                "CreateIngest",
                { "LambdaConfigurations": [ { "Event": "s3:ObjectCreated:*", "Function": { "Fn::GetAtt": [ "IngestStack", "Outputs.TriggerLambdaArn" ] } } ] },
                { Ref: "AWS::NoValue" }
            ]}
            Tags:
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "ingest" }
        # Don't delete this if we accidentally delete the stack (which would fail anyway unless the bucket is empty)
        DeletionPolicy : "Retain"

    ##########################################################################################################
    ## VPC & NETWORKING
    ##########################################################################################################

    VpcStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
                MultiAz: { Ref: "MultiAz" }
                PeeringCidr: { Ref: "MongoDbPeeringCidr" }
                PeeringVpc: { Ref: "MongoDbPeeringVpc" }
                Project: "preprocessing"
                Service: "compute"
                VpnCidr: { Ref: "VpnCidr" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "compute" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/infrastructure-${Environment}/vpc.yaml",
                { InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" } }
            ] }
            TimeoutInMinutes: 10
        Condition: "CreateVpc"

    ##########################################################################################################
    ##  COMPUTE CLUSTER
    ##########################################################################################################

    ComputeCluster:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Ami: { Ref: "ComputeEc2Ami" }
                Environment: { Ref: "Environment" }
                InstanceSize: { Ref: "ComputeEc2InstanceSize" }
                Keypair: { Ref: "ComputeEc2Keypair" }
                MultiAz: { Ref: "MultiAz" }
                PrivateHostedZoneId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateHostedZoneId" ] }
                PrivateSubnetAlphaId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetAlphaId" ] }
                PrivateSubnetBetaId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetBetaId" ] }
                PublicSubnetAlphaId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PublicSubnetAlphaId" ] }
                VpcId: { "Fn::GetAtt": [ "VpcStack", "Outputs.VpcId" ] }
                VpcCidr: { Ref: "VpnCidr" }

            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "compute" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/preprocessing-${Environment}/preprocessing-compute.yaml",
                { InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" } }
            ] }
            TimeoutInMinutes: 10
        Condition: "CreateCompute"

    ##########################################################################################################
    ##  PIPELINE
    ##########################################################################################################

    PipelineCluster:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
                BatchJobVersion: { Ref: "BatchJobVersion" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "compute" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "pipeline" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/preprocessing-${Environment}/preprocessing-pipeline.yaml",
                { InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" } }
            ] }
            TimeoutInMinutes: 10
        Condition: "CreatePipeline"

    ##########################################################################################################
    ##  INGEST
    ##########################################################################################################

    IngestStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                DynamodbWriteCapacity: { Ref: "DynamodbWriteCapacity" }
                Environment: { Ref: "Environment" }
                # We can't use a { Ref: "S3Bucket" } because CloudFormation notices it as a circular dependency
                S3BucketName: { "Fn::Sub": "biometrix-preprocessing-${Environment}-${AWS::Region}" }
                StateMachineArn: { "Fn::GetAtt": [ "PipelineCluster", "Outputs.StateMachineArn" ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-ingest" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "ingest" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/preprocessing-${Environment}/preprocessing-ingest.yaml",
                { InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" } }
            ] }
            TimeoutInMinutes: 10
        Condition: "CreateIngest"

    ##########################################################################################################
    ##  SFN-BATCH POLLER
    ##########################################################################################################

    PollerCluster:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Project: "preprocessing"
                Environment: { Ref: "Environment" }
                Vpc: { "Fn::GetAtt": [ "VpcStack", "Outputs.VpcId" ] }
                PrivateSubnets: { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetIds" ] }
                ActivityArn: { "Fn::GetAtt": [ "PipelineCluster", "Outputs.ActivityArn" ] }
                SqsQueueName: { "Fn::GetAtt": [ "PipelineCluster", "Outputs.LinearitySqsQueueName" ] }
                InstanceSize: "t2.micro"
                PollerVersion: { Ref: "PollerVersion" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-sfnbatch-poller" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "sfnbatch" }
            TemplateURL: { Ref: "PollerTemplate" }
            TimeoutInMinutes: 10
        Condition: "CreatePoller"

    ##########################################################################################################
    ##  MONITORING
    ##########################################################################################################

    MonitoringCluster:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
                AutoscalingSchedule: { Ref: "AutoscalingSchedule" }
                EfsId: { "Fn::GetAtt": [ "ComputeCluster", "Outputs.EfsId" ] }
                BatchJobQueueArn: { "Fn::GetAtt": [ "ComputeCluster", "Outputs.JobQueueArn" ] }
                BatchComputeEnvironmentArn: { "Fn::GetAtt": [ "ComputeCluster", "Outputs.ComputeEnvironmentArn" ] }
                PipelineStateMachineArn: { "Fn::GetAtt": [ "PipelineCluster", "Outputs.StateMachineArn" ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-monitoring" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "sfnbatch" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/preprocessing-${Environment}/preprocessing-monitoring.yaml",
                { InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" } }
            ] }
            TimeoutInMinutes: 10
        Condition: "CreateMonitoring"

    ##########################################################################################################
    ##  API GATEWAY
    ##########################################################################################################

    ApiGatewayLambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
              - { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:policy/infrastructure-${Environment}-querypostgres" }
              - { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:policy/preprocessing-${Environment}-ingest-sessions-read" }
              - { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:policy/preprocessing-${Environment}-ingest-sessions-write" }
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "s3:PutObject"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:s3:::${S3Bucket}/*" }
            RoleName: { "Fn::Sub": "preprocessing-${Environment}-apigateway-${AWS::Region}" }
        DependsOn:
          - "IngestStack"

    ApiGatewayLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::Sub": "biometrix-infrastructure-${AWS::Region}" }
                S3Key: { "Fn::Sub": "lambdas/preprocessing-${Environment}/apigateway.zip" }
            Environment:
                Variables:
                    DYNAMODB_TABLENAME_SESSIONS: { "Fn::GetAtt": [ "IngestStack", "Outputs.SessionEventsTableName" ] }
                    ENVIRONMENT: { Ref: 'Environment' }
                    S3_INGEST_BUCKET_NAME: { "Fn::Sub": "biometrix-preprocessing-${Environment}-${AWS::Region}" }
            Handler: "apigateway.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "ApiGatewayLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-apigateway-execute" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-apigateway-execute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TracingConfig:
                Mode: "Active"

    ApigatewayStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Project: "preprocessing"
                Environment: { Ref: "Environment" }
                Service: "apigateway"
                LambdaArn: { "Fn::GetAtt": [ "ApiGatewayLambda", "Arn" ] }
                CustomAuthLambdaArn: { "Fn::ImportValue": { "Fn::Sub": "users-${Environment}-CustomAuthLambdaArn" } }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-apigateway" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/infrastructure-${Environment}/apigateway.yaml",
                { InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" } }
            ] }
            TimeoutInMinutes: 30
